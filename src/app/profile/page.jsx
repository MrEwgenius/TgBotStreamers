"use client";

import { useEffect, useState } from "react";
import styles from "./page.module.scss";
import { ChevronDown, ChevronUp } from "lucide-react";
import { useSearchParams } from "next/navigation";
import BottomTabs from "@/components/BottomTabs/BottomTabs";

const ProfilePage = () => {
  const [activeTab, setActiveTab] = useState("history"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ò—Å—Ç–æ—Ä–∏—è
  const [history, setHistory] = useState([]);
  const [expandedItem, setExpandedItem] = useState(null);
  const [loading, setLoading] = useState(true);
  const searchParams = useSearchParams();
  const userIdFromUrl = searchParams.get("user_id");
  // const userIdFromUrl = 13;
  console.log(userIdFromUrl);

  const subscriptionInfo = {
    plan: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
    endDate: "31.12.2025",
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
  const groupCampaignsByDate = (campaigns) => {
    const groupedData = {};

    campaigns.forEach((campaign) => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ created_at
      const date = new Date(campaign.created_at);
      const dateKey = date.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

      // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–µ–º –µ–µ
      if (!groupedData[dateKey]) {
        groupedData[dateKey] = {
          date: dateKey,
          items: [],
        };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
      groupedData[dateKey].items.push({
        streamerName: extractStreamerNickname(
          campaign.streamer_link || "streamer"
        ),
        streamerLink: campaign.streamer_link,
        results: {
          clientPrice: campaign.client_price,
          avgFtdAmount: campaign.avg_ftd_amount,
          pricePerPlayer: campaign.price_per_player,
          priceDifference: campaign.price_difference,
          proposedDiscount: campaign.proposed_discount,
          finalClientPrice: campaign.final_client_price,
          finalStreamerPrice: campaign.final_streamer_price,
        },
      });
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    return Object.values(groupedData).sort(
      (a, b) => new Date(b.date) - new Date(a.date)
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
  const extractStreamerNickname = (url) => {
    if (!url) return "streamer";

    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –¥–æ–º–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å
      const path = url.replace(/^https?:\/\/(www\.)?[^/]+\//, "");
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º
      return path.split("/").pop() || "streamer";
    } catch (error) {
      return "streamer";
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API
  useEffect(() => {
    const fetchCampaigns = async () => {
      if (!userIdFromUrl) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö");
        setLoading(false);
        return;
      }

      try {
        setLoading(true);

        const response = await fetch("https://holstenmain.com/api/getCampaigns", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: Number.parseInt(userIdFromUrl),
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
        const groupedData = groupCampaignsByDate(data);
        setHistory(groupedData);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (groupedData.length > 0 && groupedData[0].items.length > 0) {
          setExpandedItem(`${groupedData[0].date}-0`);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCampaigns();
  }, [userIdFromUrl]);

  const toggleExpand = (dateIndex, itemIndex) => {
    const itemKey = `${history[dateIndex].date}-${itemIndex}`;
    setExpandedItem(expandedItem === itemKey ? null : itemKey);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü)
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.toLocaleString("ru", { month: "long" });
    return `${day} ${month}`;
  };

  return (
    <div className={styles.profileContainer}>
      <h1 className={styles.title}>
        –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
        <span className={styles.userIcon}>üë§</span>
      </h1>

      <div className={styles.tabContainer}>
        <button
          className={`${styles.tabButton} ${
            activeTab === "subscription" ? styles.active : ""
          }`}
          onClick={() => setActiveTab("subscription")}
        >
          –ü–æ–¥–ø–∏—Å–∫–∞
        </button>
        <button
          className={`${styles.tabButton} ${
            activeTab === "history" ? styles.active : ""
          }`}
          onClick={() => setActiveTab("history")}
        >
          –ò—Å—Ç–æ—Ä–∏—è
        </button>
      </div>

      {activeTab === "subscription" && (
        <div className={styles.subscriptionInfo}>
          <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</h2>
          <p>
            <span className={styles.label}>–ü–ª–∞–Ω:</span>
            <span className={styles.value}>{subscriptionInfo.plan}</span>
          </p>
          <p>
            <span className={styles.label}>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</span>
            <span className={styles.value}>{subscriptionInfo.endDate}</span>
          </p>
        </div>
      )}

      {activeTab === "history" && (
        <div className={styles.historyContainer}>
          {loading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</p>
          ) : history.length === 0 ? (
            <p>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>
          ) : (
            history.map((dateGroup, dateIndex) => (
              <div key={dateGroup.date} className={styles.dateGroup}>
                <h3 className={styles.dateLabel}>
                  {formatDate(dateGroup.date)}
                </h3>
                <ul className={styles.historyList}>
                  {dateGroup.items.map((item, itemIndex) => {
                    const itemKey = `${dateGroup.date}-${itemIndex}`;
                    const isExpanded = expandedItem === itemKey;

                    return (
                      <li key={itemKey} className={styles.historyItem}>
                        <div
                          className={styles.historyHeader}
                          onClick={() => toggleExpand(dateIndex, itemIndex)}
                        >
                          <span className={styles.streamerName}>
                            {item.streamerName}
                          </span>
                          {isExpanded ? (
                            <ChevronUp size={24} />
                          ) : (
                            <ChevronDown size={24} />
                          )}
                        </div>

                        {isExpanded && (
                          <div className={styles.historyDetails}>
                            <p>
                              <span>–¶–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:</span>
                              <span>${item.results.clientPrice}</span>
                            </p>
                            <p>
                              <span>–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —á–µ–∫–∞ –æ–¥–Ω–æ–≥–æ FTD:</span>
                              <span>${item.results.avgFtdAmount}</span>
                            </p>
                            <p>
                              <span>–¶–µ–Ω–∞ 1 –∏–≥—Ä–æ–∫–∞:</span>
                              <span>${item.results.pricePerPlayer}</span>
                            </p>
                            <p>
                              <span>–û—Ç–ª–∏—á–∏–µ —Ü–µ–Ω—ã:</span>
                              <span>{item.results.priceDifference}%</span>
                            </p>
                            <p>
                              <span>
                                –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å—Ç—Ä–∏–º–µ—Ä–∞:
                              </span>
                              <span>{item.results.proposedDiscount}%</span>
                            </p>
                            <p>
                              <span>–¶–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ –Ω–∞—à–∏–º —Ä–∞—Å—á–µ—Ç–∞–º:</span>
                              <span>${item.results.finalClientPrice}</span>
                            </p>
                            <p>
                              <span>–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –Ω–∞—à–∏–º —Ä–∞—Å—á–µ—Ç–∞–º:</span>
                              <span>${item.results.finalStreamerPrice}</span>
                            </p>
                          </div>
                        )}
                      </li>
                    );
                  })}
                </ul>
              </div>
            ))
          )}
        </div>
      )}

      <BottomTabs />
    </div>
  );
};

export default ProfilePage;
